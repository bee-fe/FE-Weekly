(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{422:function(t,e,a){"use strict";a.r(e);var r=a(54),n=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"小蜜蜂前端周刊第二十九期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小蜜蜂前端周刊第二十九期"}},[t._v("#")]),t._v(" 小蜜蜂前端周刊第二十九期")]),t._v(" "),a("h2",{attrs:{id:"个人"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#个人"}},[t._v("#")]),t._v(" 个人")]),t._v(" "),a("h3",{attrs:{id:"git-之标签管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-之标签管理"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://www.jianshu.com/p/9b02c07fdcc7",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 之标签管理"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("推荐理由: 如何给分支打标签，看了其实都是一些简单的命令。")]),t._v(" "),a("li",[t._v("推荐人: 徐梦婷")])]),t._v(" "),a("h3",{attrs:{id:"echarts-保存图片"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#echarts-保存图片"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://zhuchuanlei.github.io/blog/echarts-save-image/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ECharts 保存图片"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("推荐理由: ECharts 保存图片有配置可以直接用，但是保存Icon是在canvas内部的。本文介绍了怎么将ECharts配置的Icon与非ECharts配置的Icon放在一起。")]),t._v(" "),a("li",[t._v("推荐人: zhuchuanlei")])]),t._v(" "),a("h2",{attrs:{id:"新鲜事"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新鲜事"}},[t._v("#")]),t._v(" 新鲜事")]),t._v(" "),a("h3",{attrs:{id:"精读《what-s-new-in-javascript》"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#精读《what-s-new-in-javascript》"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://juejin.im/post/5cf4773be51d4556bb4cd334",target:"_blank",rel:"noopener noreferrer"}},[t._v("精读《What's new in javascript》"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("推荐理由: 2019 年 Google I/O 介绍了一些激动人心的 JS 新特性，这些特性有些已经被主流浏览器实现，并支持 polyfill，有些还在草案阶段。我们可以看到 JS 语言正变得越来越严谨，不同规范间也逐渐完成了闭环，而且在不断吸纳其他语言的优秀特性，比如 WeakRef，让 JS 在成为使用范围最广编程语言的同时，也越成为编程语言的集大成者，让我们有信心继续跟随 JS 生态，不用被新生的小语种分散精力。")])]),t._v(" "),a("h3",{attrs:{id:"精读《function-component-入门》"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#精读《function-component-入门》"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://github.com/dt-fe/weekly/blob/v2/104.%E7%B2%BE%E8%AF%BB%E3%80%8AFunction%20Component%20%E5%85%A5%E9%97%A8%E3%80%8B.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("精读《Function Component 入门》"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("推荐理由: 如果你在使用 React 16，可以尝试 Function Component 风格，享受更大的灵活性。但在尝试之前，最好先阅读本文，对 Function Component 的思维模式有一个初步认识，防止因思维模式不同步造成的困扰。")])]),t._v(" "),a("h3",{attrs:{id:"webpack5-0-新特性尝鲜实战-🦀🦀"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack5-0-新特性尝鲜实战-🦀🦀"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzAwNTAzMjcxNg==&mid=2651425648&idx=1&sn=4ea1ceae6b6393a0e344b9f7344e40b4&chksm=80dff513b7a87c0574dd701cb96128033445a66c93dc1b2e2c8ce73d685a9184b73e523660e5&mpshare=1&scene=2&srcid=&from=timeline&ascene=2&devicetype=androi",target:"_blank",rel:"noopener noreferrer"}},[t._v("Webpack5.0 新特性尝鲜实战 🦀🦀"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("推荐理由: 在老袁写这篇文章的时候，v5版本仍然处于早期阶段，可能仍然有问题。而且作为一个major版本，其中有一些breaking changes，可能会导致一些配置和插件不工作。但这并无妨碍我们去开始对changelog上的新特性进行尝鲜实战。")])]),t._v(" "),a("h2",{attrs:{id:"react"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react"}},[t._v("#")]),t._v(" React")]),t._v(" "),a("h3",{attrs:{id:"【译】在-react-中处理状态的替代方法-url"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#【译】在-react-中处理状态的替代方法-url"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://segmentfault.com/a/1190000019364821#articleHeader5",target:"_blank",rel:"noopener noreferrer"}},[t._v("【译】在 React 中处理状态的替代方法：URL"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("推荐理由: 如何在 React App 中管理全局状态，是所有类库之间一直争论不休的事情。然而，依我拙见，我们使用 URL 和 react-router 也可以做同样的事情。")])]),t._v(" "),a("h2",{attrs:{id:"css"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css"}},[t._v("#")]),t._v(" CSS")]),t._v(" "),a("h3",{attrs:{id:"跳起来-你不知道的css-animation新的steps-值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跳起来-你不知道的css-animation新的steps-值"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://segmentfault.com/a/1190000019371312",target:"_blank",rel:"noopener noreferrer"}},[t._v("跳起来：你不知道的CSS Animation新的Steps()值"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("推荐理由: CSS动画中有一个animation-timing-function属性，它的取值除了ease，linear，cubic-bezier之外，还有一个steps()阶跃函数，这篇文章我们来讨论steps()函数新增的四种取值。到目前为止，这新增的几个取值仅在Firefox 65+中可用，也就是说在其他浏览器实现之前，演示只能在Firefox中实现。")])]),t._v(" "),a("comment-comment")],1)}),[],!1,null,null,null);e.default=n.exports}}]);